/**
 * Sistema de Narrativa por Cap√≠tulos
 * 
 * Maneja la estructura narrativa de 3 actos por escenario:
 * - Principio: Introducci√≥n y setup
 * - Medio: Desarrollo y complicaciones  
 * - Final: Cl√≠max y resoluci√≥n
 * 
 * Caracter√≠sticas:
 * - Elementos visuales entre etapas (videos, GIFs, im√°genes)
 * - Texto narrativo contextual
 * - Efectos visuales y transiciones
 * - Completamente parametrizable por escenario
 * - Integraci√≥n con AssetManager
 */

import { assetManager } from './AssetManager';
// import { chapterManager } from './ChapterManager'; // Reserved for future use
import { pixiScreenEffects } from './PixiScreenEffects';
import type { ScreenEffectType } from './PixiScreenEffects';

export type ChapterAct = 'beginning' | 'middle' | 'end';
export type NarrativeMediaType = 'image' | 'gif' | 'video' | 'text_only';

export interface NarrativeElement {
  id: string;
  act: ChapterAct;
  title: string;
  content: string; // Texto narrativo
  mediaType: NarrativeMediaType;
  mediaPath?: string; // Path al archivo multimedia
  duration?: number; // Duraci√≥n en ms (para videos/GIFs)
  screenEffect?: ScreenEffectType;
  effectIntensity?: 'low' | 'medium' | 'high';
  skipable: boolean;
  autoAdvance?: boolean; // Avanza autom√°ticamente despu√©s de la duraci√≥n
}

export interface ChapterNarrativeConfig {
  scenarioId: string;
  chapterId: string;
  title: string;
  description: string;
  acts: {
    beginning: NarrativeElement;
    middle?: NarrativeElement; // Opcional, solo si el cap√≠tulo lo requiere
    end: NarrativeElement;
  };
}

// Configuraciones de narrativa por cap√≠tulo
const NARRATIVE_CONFIGS: Record<string, ChapterNarrativeConfig> = {
  'chapter_1_easy': {
    scenarioId: 'default',
    chapterId: 'chapter_1_easy',
    title: 'Despertar - Los Primeros Susurros',
    description: 'Tu primera incursi√≥n en las profundidades de la estaci√≥n abandonada',
    acts: {
      beginning: {
        id: 'ch1-begin',
        act: 'beginning',
        title: 'Llegada a la Estaci√≥n',
        content: `Las luces de emergencia parpadean d√©bilmente mientras te abres paso por los corredores abandonados. 
        
El aire est√° cargado de electricidad est√°tica y un zumbido apenas perceptible resuena en las paredes met√°licas. Los informes hablaban de una "anomal√≠a", pero nada te prepar√≥ para la sensaci√≥n de ser observado.
        
Tu misi√≥n es simple: restaurar los sistemas cr√≠ticos y evacuar. Pero algo en la oscuridad susurra que no ser√° tan f√°cil...`,
        mediaType: 'image',
        mediaPath: '/images/scenarios/default/narrative/chapter1-beginning.svg',
        duration: 8000,
        screenEffect: 'static',
        effectIntensity: 'low',
        skipable: true,
        autoAdvance: false
      },
      end: {
        id: 'ch1-end',
        act: 'end',
        title: 'Primeros Ecos',
        content: `Los sistemas comienzan a responder, pero cada reparaci√≥n parece despertar algo m√°s en las profundidades.
        
Las sombras se mueven donde no deber√≠an moverse. Los sensores captan lecturas imposibles. Y ese susurro... ahora est√° m√°s cerca.
        
Has completado las reparaciones b√°sicas, pero sientes que esto es solo el comienzo. La estaci√≥n guarda secretos m√°s oscuros, y el ECO apenas ha comenzado a mostrar su verdadero poder.`,
        mediaType: 'image',
        mediaPath: '/images/scenarios/default/narrative/chapter1-end.svg',
        duration: 5000,
        screenEffect: 'glitch',
        effectIntensity: 'medium',
        skipable: true,
        autoAdvance: false
      }
    }
  },
  'chapter_2_descent': {
    scenarioId: 'default',
    chapterId: 'chapter_2_descent',
    title: 'En las Profundidades',
    description: 'Las anomal√≠as se intensifican mientras desciendes a los niveles inferiores',
    acts: {
      beginning: {
        id: 'ch2-begin',
        act: 'beginning',
        title: 'Descenso',
        content: `Los niveles superiores ya no son seguros. Las lecturas de energ√≠a se han vuelto err√°ticas y los sistemas que reparaste muestran signos de sabotaje... interno.
        
Debes descender m√°s profundo, donde la oscuridad es absoluta y el aire mismo parece tener vida propia. Los sensores detectan movimiento en sectores que se supone est√°n vac√≠os.
        
Con cada paso hacia abajo, el susurro se vuelve m√°s claro. Ya no es solo ruido... son palabras.`,
        mediaType: 'image',
        mediaPath: '/images/scenarios/default/narrative/chapter2-beginning.svg',
        duration: 10000,
        screenEffect: 'darkness',
        effectIntensity: 'medium',
        skipable: true,
        autoAdvance: false
      },
      middle: {
        id: 'ch2-middle',
        act: 'middle',
        title: 'Revelaci√≥n',
        content: `En el n√∫cleo de la estaci√≥n descubres la verdad: el ECO no es solo un mal funcionamiento de los sistemas.
        
Es algo consciente. Algo que ha estado esperando. Los circuitos no est√°n da√±ados... est√°n evolucionando.
        
Las paredes pulsan con una vida artificial que desaf√≠a toda l√≥gica. Y ahora, finalmente, el ECO te habla directamente.`,
        mediaType: 'image',
        mediaPath: '/images/scenarios/default/narrative/chapter2-middle.svg',
        duration: 6000,
        screenEffect: 'corruption',
        effectIntensity: 'high',
        skipable: true,
        autoAdvance: false
      },
      end: {
        id: 'ch2-end',
        act: 'end',
        title: 'El Coraz√≥n de la Bestia',
        content: `Has llegado al n√∫cleo central. Aqu√≠, donde todo comenz√≥, el ECO se manifiesta en toda su terrible gloria.
        
Los sistemas que cre√≠as controlar han sido sus ojos y o√≠dos todo este tiempo. Cada reparaci√≥n, cada decisi√≥n... √©l lo sab√≠a todo.
        
Ahora queda solo una pregunta: ¬øviniste aqu√≠ a destruirlo, o √©l te trajo aqu√≠ para algo m√°s?`,
        mediaType: 'image',
        mediaPath: '/images/scenarios/default/narrative/chapter2-end.svg',
        duration: 7000,
        screenEffect: 'energy',
        effectIntensity: 'high',
        skipable: true,
        autoAdvance: false
      }
    }
  }
};

class ChapterNarrativeSystem {
  private currentNarrative: ChapterNarrativeConfig | null = null;
  private listeners: ((element: NarrativeElement, config: ChapterNarrativeConfig) => void)[] = [];
  private activeScenarioId: string | null = null;

  /**
   * Carga la narrativa para un cap√≠tulo espec√≠fico
   */
  async loadNarrativeForChapter(chapterId: string, scenarioId?: string): Promise<ChapterNarrativeConfig | null> {
    this.activeScenarioId = scenarioId || this.activeScenarioId;

    let config: ChapterNarrativeConfig | undefined = undefined;

    // 1) Try to load from scenario files if scenarioId provided
    if (this.activeScenarioId) {
      try {
        const narrativeMap = (await import(`../scenarios/${this.activeScenarioId}/narrative.json`)).default as Record<string, ChapterNarrativeConfig>;
        config = narrativeMap?.[chapterId];
        if (config) {
          console.log(`üìñ ChapterNarrativeSystem: Loaded narrative from scenario files for chapter: ${chapterId}`);
        }
      } catch (e) {
        console.warn(`‚ö†Ô∏è ChapterNarrativeSystem: No scenario narrative found for ${this.activeScenarioId}, falling back to defaults.`);
      }
    }

    // 2) Fallback to built-in configs
    if (!config) {
      config = NARRATIVE_CONFIGS[chapterId];
      if (!config) {
        console.warn(`üìñ ChapterNarrativeSystem: No narrative config found for chapter: ${chapterId}`);
        return null;
      }
    }

    console.log(`üìñ ChapterNarrativeSystem: Loading narrative for chapter: ${chapterId}`);
    
    // Pre-cargar assets multimedia
    await this.preloadNarrativeAssets(config);
    
    this.currentNarrative = config;
    return config;
  }

  /**
   * Pre-carga los assets multimedia de una narrativa
   */
  private async preloadNarrativeAssets(config: ChapterNarrativeConfig): Promise<void> {
    const elements = [config.acts.beginning, config.acts.middle, config.acts.end].filter(Boolean) as NarrativeElement[];
    
    const loadPromises = elements.map(async (element) => {
      if (element.mediaPath && (element.mediaType === 'image' || element.mediaType === 'gif')) {
        try {
          const fallbackPath = this.getFallbackPath(element.mediaPath, element.mediaType);
          await assetManager.loadImage(element.mediaPath, fallbackPath);
          console.log(`‚úÖ ChapterNarrativeSystem: Preloaded ${element.id} media`);
        } catch (error) {
          console.warn(`‚ö†Ô∏è ChapterNarrativeSystem: Failed to preload ${element.id}:`, error);
        }
      } else {
        // Skip video preloading via image loader; rely on native video streaming
      }
    });

    await Promise.allSettled(loadPromises);
  }

  /**
   * Obtiene un path de fallback basado en el tipo de media
   */
  private getFallbackPath(originalPath: string, mediaType: NarrativeMediaType): string {
    const basePath = originalPath.substring(0, originalPath.lastIndexOf('.'));
    
    switch (mediaType) {
      case 'video':
        return basePath + '.gif'; // Fallback de video a GIF
      case 'gif':
        return basePath + '.png'; // Fallback de GIF a imagen
      case 'image':
        return basePath + '.svg'; // Fallback de PNG a SVG
      default:
        return originalPath;
    }
  }

  /**
   * Reproduce un elemento narrativo espec√≠fico
   */
  async playNarrativeElement(act: ChapterAct): Promise<void> {
    if (!this.currentNarrative) {
      console.warn(`üìñ ChapterNarrativeSystem: No narrative loaded`);
      return;
    }

    const element = this.currentNarrative.acts[act];
    if (!element) {
      console.warn(`üìñ ChapterNarrativeSystem: No ${act} element found in current narrative`);
      return;
    }

    console.log(`üìñ ChapterNarrativeSystem: Playing narrative element: ${element.id}`);

    // Aplicar efecto de pantalla si existe
    if (element.screenEffect && element.screenEffect !== 'none') {
      try {
        await pixiScreenEffects.playEffect({
          type: element.screenEffect,
          intensity: element.effectIntensity || 'medium',
          duration: 2000 // Efecto inicial m√°s corto
        });
      } catch (error) {
        console.warn(`‚ö†Ô∏è ChapterNarrativeSystem: Screen effect failed:`, error);
      }
    }

    // Notificar a listeners para mostrar UI
    this.notifyListeners(element, this.currentNarrative);
  }

  /**
   * Obtiene la configuraci√≥n narrativa actual
   */
  getCurrentNarrative(): ChapterNarrativeConfig | null {
    return this.currentNarrative;
  }

  /**
   * Obtiene un elemento narrativo espec√≠fico
   */
  getNarrativeElement(act: ChapterAct): NarrativeElement | null {
    if (!this.currentNarrative) return null;
    return this.currentNarrative.acts[act] || null;
  }

  /**
   * Verifica si un cap√≠tulo tiene narrativa configurada
   */
  hasNarrativeForChapter(chapterId: string): boolean {
    return !!NARRATIVE_CONFIGS[chapterId];
  }

  /**
   * Obtiene todas las configuraciones disponibles (para debugging)
   */
  getAllNarrativeConfigs(): Record<string, ChapterNarrativeConfig> {
    return { ...NARRATIVE_CONFIGS };
  }

  /**
   * Subscribirse a eventos de narrativa
   */
  subscribe(listener: (element: NarrativeElement, config: ChapterNarrativeConfig) => void): () => void {
    this.listeners.push(listener);
    return () => {
      this.listeners = this.listeners.filter(l => l !== listener);
    };
  }

  /**
   * Notificar a listeners
   */
  private notifyListeners(element: NarrativeElement, config: ChapterNarrativeConfig): void {
    this.listeners.forEach(listener => {
      try {
        listener(element, config);
      } catch (error) {
        console.error('üö® ChapterNarrativeSystem: Error in listener:', error);
      }
    });
  }

  /**
   * Limpia la narrativa actual
   */
  clearCurrentNarrative(): void {
    this.currentNarrative = null;
  }

  /**
   * Registra una nueva configuraci√≥n de narrativa (para mods/expansiones)
   */
  registerNarrativeConfig(chapterId: string, config: ChapterNarrativeConfig): void {
    NARRATIVE_CONFIGS[chapterId] = config;
    console.log(`üìñ ChapterNarrativeSystem: Registered narrative for chapter: ${chapterId}`);
  }
}

// Singleton instance
export const chapterNarrativeSystem = new ChapterNarrativeSystem();
